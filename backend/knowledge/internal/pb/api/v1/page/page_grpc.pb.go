// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/v1/page/page.proto

package page

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PageService_CreatePage_FullMethodName     = "/knowdateapp.knowledge.v1.page.PageService/CreatePage"
	PageService_GetPageById_FullMethodName    = "/knowdateapp.knowledge.v1.page.PageService/GetPageById"
	PageService_DeletePageById_FullMethodName = "/knowdateapp.knowledge.v1.page.PageService/DeletePageById"
)

// PageServiceClient is the client API for PageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageServiceClient interface {
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	GetPageById(ctx context.Context, in *GetPageByIdRequest, opts ...grpc.CallOption) (*GetPageByIdResponse, error)
	DeletePageById(ctx context.Context, in *DeletePageByIdRequest, opts ...grpc.CallOption) (*DeletePageByIdResponse, error)
}

type pageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageServiceClient(cc grpc.ClientConnInterface) PageServiceClient {
	return &pageServiceClient{cc}
}

func (c *pageServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, PageService_CreatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) GetPageById(ctx context.Context, in *GetPageByIdRequest, opts ...grpc.CallOption) (*GetPageByIdResponse, error) {
	out := new(GetPageByIdResponse)
	err := c.cc.Invoke(ctx, PageService_GetPageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) DeletePageById(ctx context.Context, in *DeletePageByIdRequest, opts ...grpc.CallOption) (*DeletePageByIdResponse, error) {
	out := new(DeletePageByIdResponse)
	err := c.cc.Invoke(ctx, PageService_DeletePageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageServiceServer is the server API for PageService service.
// All implementations must embed UnimplementedPageServiceServer
// for forward compatibility
type PageServiceServer interface {
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	GetPageById(context.Context, *GetPageByIdRequest) (*GetPageByIdResponse, error)
	DeletePageById(context.Context, *DeletePageByIdRequest) (*DeletePageByIdResponse, error)
	mustEmbedUnimplementedPageServiceServer()
}

// UnimplementedPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageServiceServer struct {
}

func (UnimplementedPageServiceServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedPageServiceServer) GetPageById(context.Context, *GetPageByIdRequest) (*GetPageByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageById not implemented")
}
func (UnimplementedPageServiceServer) DeletePageById(context.Context, *DeletePageByIdRequest) (*DeletePageByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageById not implemented")
}
func (UnimplementedPageServiceServer) mustEmbedUnimplementedPageServiceServer() {}

// UnsafePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServiceServer will
// result in compilation errors.
type UnsafePageServiceServer interface {
	mustEmbedUnimplementedPageServiceServer()
}

func RegisterPageServiceServer(s grpc.ServiceRegistrar, srv PageServiceServer) {
	s.RegisterService(&PageService_ServiceDesc, srv)
}

func _PageService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_GetPageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).GetPageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_GetPageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).GetPageById(ctx, req.(*GetPageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_DeletePageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).DeletePageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_DeletePageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).DeletePageById(ctx, req.(*DeletePageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PageService_ServiceDesc is the grpc.ServiceDesc for PageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowdateapp.knowledge.v1.page.PageService",
	HandlerType: (*PageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _PageService_CreatePage_Handler,
		},
		{
			MethodName: "GetPageById",
			Handler:    _PageService_GetPageById_Handler,
		},
		{
			MethodName: "DeletePageById",
			Handler:    _PageService_DeletePageById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/page/page.proto",
}
