// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/v1/topic/topic.proto

package topic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TopicService_CreateTopic_FullMethodName     = "/knowdateapp.knowledge.v1.topic.TopicService/CreateTopic"
	TopicService_GetByCollection_FullMethodName = "/knowdateapp.knowledge.v1.topic.TopicService/GetByCollection"
	TopicService_GetTopicById_FullMethodName    = "/knowdateapp.knowledge.v1.topic.TopicService/GetTopicById"
	TopicService_DeleteTopicById_FullMethodName = "/knowdateapp.knowledge.v1.topic.TopicService/DeleteTopicById"
)

// TopicServiceClient is the client API for TopicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicServiceClient interface {
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetByCollection(ctx context.Context, in *GetByCollectionRequest, opts ...grpc.CallOption) (*GetByCollectionResponse, error)
	GetTopicById(ctx context.Context, in *GetTopicByIdRequest, opts ...grpc.CallOption) (*GetTopicByIdResponse, error)
	DeleteTopicById(ctx context.Context, in *DeleteTopicByIdRequest, opts ...grpc.CallOption) (*DeleteTopicByIdResponse, error)
}

type topicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicServiceClient(cc grpc.ClientConnInterface) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, TopicService_CreateTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) GetByCollection(ctx context.Context, in *GetByCollectionRequest, opts ...grpc.CallOption) (*GetByCollectionResponse, error) {
	out := new(GetByCollectionResponse)
	err := c.cc.Invoke(ctx, TopicService_GetByCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) GetTopicById(ctx context.Context, in *GetTopicByIdRequest, opts ...grpc.CallOption) (*GetTopicByIdResponse, error) {
	out := new(GetTopicByIdResponse)
	err := c.cc.Invoke(ctx, TopicService_GetTopicById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) DeleteTopicById(ctx context.Context, in *DeleteTopicByIdRequest, opts ...grpc.CallOption) (*DeleteTopicByIdResponse, error) {
	out := new(DeleteTopicByIdResponse)
	err := c.cc.Invoke(ctx, TopicService_DeleteTopicById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServiceServer is the server API for TopicService service.
// All implementations must embed UnimplementedTopicServiceServer
// for forward compatibility
type TopicServiceServer interface {
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetByCollection(context.Context, *GetByCollectionRequest) (*GetByCollectionResponse, error)
	GetTopicById(context.Context, *GetTopicByIdRequest) (*GetTopicByIdResponse, error)
	DeleteTopicById(context.Context, *DeleteTopicByIdRequest) (*DeleteTopicByIdResponse, error)
	mustEmbedUnimplementedTopicServiceServer()
}

// UnimplementedTopicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopicServiceServer struct {
}

func (UnimplementedTopicServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedTopicServiceServer) GetByCollection(context.Context, *GetByCollectionRequest) (*GetByCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCollection not implemented")
}
func (UnimplementedTopicServiceServer) GetTopicById(context.Context, *GetTopicByIdRequest) (*GetTopicByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicById not implemented")
}
func (UnimplementedTopicServiceServer) DeleteTopicById(context.Context, *DeleteTopicByIdRequest) (*DeleteTopicByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicById not implemented")
}
func (UnimplementedTopicServiceServer) mustEmbedUnimplementedTopicServiceServer() {}

// UnsafeTopicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicServiceServer will
// result in compilation errors.
type UnsafeTopicServiceServer interface {
	mustEmbedUnimplementedTopicServiceServer()
}

func RegisterTopicServiceServer(s grpc.ServiceRegistrar, srv TopicServiceServer) {
	s.RegisterService(&TopicService_ServiceDesc, srv)
}

func _TopicService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_GetByCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).GetByCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicService_GetByCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).GetByCollection(ctx, req.(*GetByCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_GetTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).GetTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicService_GetTopicById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).GetTopicById(ctx, req.(*GetTopicByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_DeleteTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).DeleteTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicService_DeleteTopicById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).DeleteTopicById(ctx, req.(*DeleteTopicByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicService_ServiceDesc is the grpc.ServiceDesc for TopicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowdateapp.knowledge.v1.topic.TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopic",
			Handler:    _TopicService_CreateTopic_Handler,
		},
		{
			MethodName: "GetByCollection",
			Handler:    _TopicService_GetByCollection_Handler,
		},
		{
			MethodName: "GetTopicById",
			Handler:    _TopicService_GetTopicById_Handler,
		},
		{
			MethodName: "DeleteTopicById",
			Handler:    _TopicService_DeleteTopicById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/topic/topic.proto",
}
