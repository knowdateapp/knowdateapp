// Package note provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package note

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Note defines model for Note.
type Note struct {
	ContentUri string  `json:"content_uri"`
	Id         string  `json:"id"`
	Title      *string `json:"title"`
	Workspace  string  `json:"workspace"`
}

// UpdateNotePart defines model for UpdateNotePart.
type UpdateNotePart struct {
	Title *string `json:"title"`
}

// NoteId defines model for NoteId.
type NoteId = string

// Workspace defines model for Workspace.
type Workspace = string

// CreateNoteResponse defines model for CreateNoteResponse.
type CreateNoteResponse = Note

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetNoteByIdResponse defines model for GetNoteByIdResponse.
type GetNoteByIdResponse = Note

// ListNotesResponse defines model for ListNotesResponse.
type ListNotesResponse struct {
	Notes []Note `json:"notes"`
}

// UpdateNoteResponse defines model for UpdateNoteResponse.
type UpdateNoteResponse = Note

// CreateNoteRequest defines model for CreateNoteRequest.
type CreateNoteRequest struct {
	Title *string `json:"title"`
}

// CreateNoteJSONBody defines parameters for CreateNote.
type CreateNoteJSONBody struct {
	Title *string `json:"title"`
}

// UpdateNoteMultipartBody defines parameters for UpdateNote.
type UpdateNoteMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
	Note UpdateNotePart      `json:"note"`
}

// CreateNoteJSONRequestBody defines body for CreateNote for application/json ContentType.
type CreateNoteJSONRequestBody CreateNoteJSONBody

// UpdateNoteMultipartRequestBody defines body for UpdateNote for multipart/form-data ContentType.
type UpdateNoteMultipartRequestBody UpdateNoteMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /{workspace}/notes)
	ListNotes(w http.ResponseWriter, r *http.Request, workspace Workspace)

	// (POST /{workspace}/notes)
	CreateNote(w http.ResponseWriter, r *http.Request, workspace Workspace)

	// (GET /{workspace}/notes/{note-id})
	GetNoteById(w http.ResponseWriter, r *http.Request, workspace Workspace, noteId NoteId)

	// (PATCH /{workspace}/notes/{note-id})
	UpdateNote(w http.ResponseWriter, r *http.Request, workspace Workspace, noteId NoteId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /{workspace}/notes)
func (_ Unimplemented) ListNotes(w http.ResponseWriter, r *http.Request, workspace Workspace) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /{workspace}/notes)
func (_ Unimplemented) CreateNote(w http.ResponseWriter, r *http.Request, workspace Workspace) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /{workspace}/notes/{note-id})
func (_ Unimplemented) GetNoteById(w http.ResponseWriter, r *http.Request, workspace Workspace, noteId NoteId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /{workspace}/notes/{note-id})
func (_ Unimplemented) UpdateNote(w http.ResponseWriter, r *http.Request, workspace Workspace, noteId NoteId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListNotes operation middleware
func (siw *ServerInterfaceWrapper) ListNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotes(w, r, workspace)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNote operation middleware
func (siw *ServerInterfaceWrapper) CreateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNote(w, r, workspace)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNoteById operation middleware
func (siw *ServerInterfaceWrapper) GetNoteById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	// ------------- Path parameter "note-id" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithOptions("simple", "note-id", chi.URLParam(r, "note-id"), &noteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "note-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNoteById(w, r, workspace, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	// ------------- Path parameter "note-id" -------------
	var noteId NoteId

	err = runtime.BindStyledParameterWithOptions("simple", "note-id", chi.URLParam(r, "note-id"), &noteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "note-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNote(w, r, workspace, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{workspace}/notes", wrapper.ListNotes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/{workspace}/notes", wrapper.CreateNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{workspace}/notes/{note-id}", wrapper.GetNoteById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/{workspace}/notes/{note-id}", wrapper.UpdateNote)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWbYvjNhD+K0ItFBZfnO21UPyt15ayUMrRF/rhWMrEGie62pIqjbeE4P9eZpzEztrZ",
	"7Ev36DdbHo2feZ552+nSN8E7dJR0sdMBIjRIGOXtZ094Y/jJYCqjDWS904X+bWOTOpoqg5V1mBRtUJVt",
	"jOhIOU+orFnoTFu+EoA2OtMOGtSF5q9vrNGZjvh3ayMaXVBsMdOp3GAD/EvaBjZNFK1b667L9B8+/pUC",
	"lPgsRP8cbp/BdPz+JFRdb4yJ3nljUWj7LiIQMnm/9J/4sPSO0MkjhFDbEhh6/jEx/t3oDyH6gJH2vshS",
	"LfG6tq5hxc89pCk9A+gP+2u3RzO/+oglMd4u078H8yC+pq3JBoiUVz42bwwQPASxsj1CNgbShV5ZB3Gr",
	"Jxgz0Z1NP49Y6UJ/lg/Zl/fuUz6gew+RJpGJi9nAxDAF79JUhv74STo8hJGd9uLfT0PsM38DSa0QnUpt",
	"WWJKVVvXW1UKIrNgKr7HCtqafojRx2fhOxWh9AZn8jPTDaYEa5yvqDGx4mGwn6P4frj7GNSBdtV4g7Wq",
	"fByO2G1SX11dKXBGfX11JdH/iMQcvtvemE8qTpswfpFEI8Hxk00CJP0HErBTebCETXocyiPJECNsZ5M9",
	"PUoKDkT5SgKU8JLENy71/0cNtIKIa6A79NXjrJlLa0H6ZxvtbHZbM3v82K6Zjbr+xQKRedV7zk6mxRjk",
	"VKuxCNLRXr/H83yr/Jkp+e37GxWiv7Ncl+CUdYSxghKlbqVFWbeWam3AwZpf9gl1JFbUYk8603cYU+/+",
	"erFcLDlgH9BBsLrQbxfLxVudyaiVWPPdkbkuP1bMGukMWnQmeOu4x1AbXT/SR1UsqJhMSWFeVoaalv8O",
	"+8yH+XweTPJhwehu7w2TL5fLcwVxtMun3USqQ5rk5duzE4HFJFinUTfoMh18ukhYP2ySgtOmd5+tYUq+",
	"mK7DGrQ9H+toU8qna1I3If36Mm0zY/5VWO+ymeTNd/tVtntZGqvVdr8tn6ozmpMvkSe7aLxf9Z+X93PT",
	"/LUyH6jcXCK5nzETkheKZ9PKm61q2kSK+zZY1wvQIAFvutL45IT32qkiQzP/hII8sbKmC/6zKmtmeXid",
	"yuJNAOPdgcZTaX+VLzKcal9CrQzeYe1Dg45YnjbWutAbolDkuVhsfKLim+X1ModgpU7zu2vd3Xb/BgAA",
	"//96l0677g4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
