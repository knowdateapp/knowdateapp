// Package card provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package card

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Card defines model for Card.
type Card struct {
	Answer    string `json:"answer"`
	Id        string `json:"id"`
	Question  string `json:"question"`
	Workspace string `json:"workspace"`
}

// CardId defines model for CardId.
type CardId = string

// Workspace defines model for Workspace.
type Workspace = string

// CreateCardResponse defines model for CreateCardResponse.
type CreateCardResponse = Card

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCardByIdResponse defines model for GetCardByIdResponse.
type GetCardByIdResponse = Card

// ListCardsResponse defines model for ListCardsResponse.
type ListCardsResponse struct {
	Cards []Card `json:"cards"`
}

// UpdateCardResponse defines model for UpdateCardResponse.
type UpdateCardResponse = Card

// CreateCardRequest defines model for CreateCardRequest.
type CreateCardRequest struct {
	Answer   string `json:"answer"`
	Question string `json:"question"`
}

// UpdateCardRequest defines model for UpdateCardRequest.
type UpdateCardRequest struct {
	Answer   string `json:"answer"`
	Question string `json:"question"`
}

// CreateCardJSONBody defines parameters for CreateCard.
type CreateCardJSONBody struct {
	Answer   string `json:"answer"`
	Question string `json:"question"`
}

// UpdateCardJSONBody defines parameters for UpdateCard.
type UpdateCardJSONBody struct {
	Answer   string `json:"answer"`
	Question string `json:"question"`
}

// CreateCardJSONRequestBody defines body for CreateCard for application/json ContentType.
type CreateCardJSONRequestBody CreateCardJSONBody

// UpdateCardJSONRequestBody defines body for UpdateCard for application/json ContentType.
type UpdateCardJSONRequestBody UpdateCardJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /{workspace}/cards)
	ListCards(w http.ResponseWriter, r *http.Request, workspace Workspace)

	// (POST /{workspace}/cards)
	CreateCard(w http.ResponseWriter, r *http.Request, workspace Workspace)

	// (GET /{workspace}/cards/{card-id})
	GetCardById(w http.ResponseWriter, r *http.Request, workspace Workspace, cardId CardId)

	// (PATCH /{workspace}/cards/{card-id})
	UpdateCard(w http.ResponseWriter, r *http.Request, workspace Workspace, cardId CardId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /{workspace}/cards)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request, workspace Workspace) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /{workspace}/cards)
func (_ Unimplemented) CreateCard(w http.ResponseWriter, r *http.Request, workspace Workspace) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /{workspace}/cards/{card-id})
func (_ Unimplemented) GetCardById(w http.ResponseWriter, r *http.Request, workspace Workspace, cardId CardId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /{workspace}/cards/{card-id})
func (_ Unimplemented) UpdateCard(w http.ResponseWriter, r *http.Request, workspace Workspace, cardId CardId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r, workspace)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCard operation middleware
func (siw *ServerInterfaceWrapper) CreateCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCard(w, r, workspace)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCardById operation middleware
func (siw *ServerInterfaceWrapper) GetCardById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	// ------------- Path parameter "card-id" -------------
	var cardId CardId

	err = runtime.BindStyledParameterWithOptions("simple", "card-id", chi.URLParam(r, "card-id"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCardById(w, r, workspace, cardId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCard operation middleware
func (siw *ServerInterfaceWrapper) UpdateCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workspace" -------------
	var workspace Workspace

	err = runtime.BindStyledParameterWithOptions("simple", "workspace", chi.URLParam(r, "workspace"), &workspace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workspace", Err: err})
		return
	}

	// ------------- Path parameter "card-id" -------------
	var cardId CardId

	err = runtime.BindStyledParameterWithOptions("simple", "card-id", chi.URLParam(r, "card-id"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCard(w, r, workspace, cardId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{workspace}/cards", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/{workspace}/cards", wrapper.CreateCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{workspace}/cards/{card-id}", wrapper.GetCardById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/{workspace}/cards/{card-id}", wrapper.UpdateCard)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/bNhD+V4jbgAEGZ9rLBgx6W7ahCNCHoj/QhyAPDHmymEokS1IODEP/e0HKtmRL",
	"hmOnCdo3Wzwe777vvrtbgzCVNRp18JCtwXLHKwzo0r9/uZM3Mv6S6IVTNiijIYOPhfJkZ0ok5kqjJ6FA",
	"ImrnUAciuJNEySlQUPGK5aEACppXCBnE09+VBAoOv9bKoYQsuBopeFFgxeOTYWWjqQ9O6QU0DYXPxn3x",
	"lgu8KKLH7e0jMe3Oz4qqaY3Rh2sjFbawOeQBI3jv26P4URgdUKef3NpSCR5DZw8+xr/uvWCdsejCxhfX",
	"/hHdyMsUkmvVXh+C1aVw21nSrb87ur1i7h9QhJhJQ+GTlT9l5OmWt0b7IQPt57MS+dVhDhn8wjpxsPbU",
	"s+i05f2wArEt+oJ7co+oia+FQO/zuixXRKSI5DSm/x/mvC7D/84Zd1F8+0ALI3EU5gq95ws8jXLy0NmP",
	"QXyY7iYHsoWdVEZiSXLjuk/RrSd/TiaEa0n+mkxS9m8wRAyvVzevS07t0f3mE0cpjrfKp0D896Ag+ok/",
	"VMDKPy3KHcjcOb4acpJcPoWKmAgxeUqQpIxSfn0t/xgaqFNEEf1m21J3Y+as/qHkuW2F9tr7STmkwTTs",
	"PH0f47wonZsjs+mfdzfEOrNUURJcE6UDupwLTJJJ3UHpRRJKxTVfxD+i5ZJCUKGMb0WgoiegsETnW/fz",
	"6Ww6ixkai5pbBRlcTWfTK6BpwCUs2XoXesN2xbrAcCRa1NIapaO8Q+10O0h7AkpRRbJS9cQVoZNTerfb",
	"Im7HS6kzYd1Yb+4O+vgfs9mxWtzZsaGQU2Gm/nT69mgzjmQGvvA9ITYUrPEnAWv7vCd8v98cotUNqGfD",
	"tV0+Vsdz7e0nbLicNAPQ56dhG5mwL4J6Q0eKl603C2TzvDIm96vNjrrPTm9EPYceetJ4s2BfVvdjg/Sl",
	"Kp8HUZwCuW3vA5CH8HaT6RXRPVMmw034IpmMDOGXkUmcqOiWWxj3efqQTtKkKY3gJZG4xNLYCnWI9NSu",
	"hAyKEGzGWLIojA/Z37P5jHGrmDYB2XIOzV3zLQAA//9R28lXMQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
